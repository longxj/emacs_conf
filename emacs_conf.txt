;; (setq debug-on-error t) ;; if want see error stack
(setq byte-compile-warnings nil)
(setq stack-trace-on-error t)
(require 'eieio-opt)
(setq make-backup-files nil)
(setq shell-file-name "bash")
(setenv "SHELL" shell-file-name)
(setq explicit-shell-file-name shell-file-name)

(add-to-list 'load-path "~/.emacs.d")

;; set region face color
(set-face-foreground 'region "black")
(set-face-background 'region "green")


;; window-numbering
(require 'window-numbering)
(window-numbering-mode 1)

(winner-mode 1)
(global-set-key (kbd "C-x 4 u") 'winner-undo)
(global-set-key (kbd "C-x 4 r") 'winner-redo)

;; helm
(add-to-list 'load-path "~/.emacs.d/helm")
(require 'helm-config)
(require 'helm-grep)
(global-set-key (kbd "C-c h") 'helm-command-prefix) ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
(global-unset-key (kbd "C-x c"))
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
(helm-mode 1)

;; cscope
(require 'xcscope)
(global-set-key "\C-ci" 'cscope-find-files-including-file)
(global-set-key "\C-cf" 'cscope-find-this-file)
(global-set-key "\C-cg" 'cscope-find-egrep-pattern)
(global-set-key "\C-ct" 'cscope-find-this-text-string)
(global-set-key "\C-cr" 'cscope-find-this-symbol)
(global-set-key "\C-cd" 'cscope-find-global-definition)
(global-set-key "\C-cu" 'cscope-pop-mark)
(setq cscope-initial-directory default-directory)

(set-face-background 'region "white")

(setq time-stamp-active t)
(setq time-stamp-warn-inactive t)
(setq time-stamp-format "%:u %02m/%02d/%04y %02h%02m%02s")
(display-time-mode 1)
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)
(setq display-time-interval 10)

;;Directly open tgz file
(auto-compression-mode 1)

;;Display the column number in mini-bar
(column-number-mode t)
(transient-mark-mode 1)

(global-set-key [f1] 'ecb-activate)
(global-set-key [f4] 'ecb-deactivate)
(global-set-key [f3] 'goto-line)
(defun mycompile()
  "mycompile"
  (interactive)
  (cd cscope-initial-directory)
  (call-interactively 'compile)
)
(global-set-key [f7] 'mycompile)
(defun mygdb()
  "mygdb"
  (interactive)
  (cd cscope-initial-directory)
  (call-interactively 'gud-gdb)
)
(global-set-key [f5] 'mygdb)
(defun gotocompilebuffer()
  "gotocompilebuffer"
  (interactive)
  (setq cb (get-buffer-create "*compilation*"))
  (switch-to-buffer cb)
)
(global-set-key [f6] 'gotocompilebuffer)
(global-set-key [f2] 'eassist-switch-h-cpp)

;; delete blank at tail of line
(add-hook 'before-save-hook(lambda()(delete-trailing-whitespace)))

;; Here's a sample .emacs file that might help you along the way.  Just
;; copy this region and paste it into your .emacs file.  You may want to
;; change some of the actual values.
(defconst my-c-style
  '((c-tab-always-indent        . t)
    ;;(c-comment-only-line-offset . 4)
    (c-hanging-braces-alist     . ((substatement-open after)
                   (brace-list-open)))
    (c-hanging-colons-alist     . ((member-init-intro before)
                   (inher-intro)
                   (case-label after)
                   (label after)
                   (access-label after)))
    (c-cleanup-list             . (scope-operator
                   empty-defun-braces
                   defun-close-semi))
    (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                   (substatement-open . 0)
                   (label . nil)
                   (arglist-cont-nonempty  . 4)
                   (case-label        . 4)
                   (block-open        . 0)
                   (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t)
    )
  "My C Programming Style")

;; offset customizations not in my-c-style
(setq c-offsets-alist '((member-init-intro . ++)))

;; Customizations for all modes in CC Mode.
(defun my-c-mode-common-hook ()
  ;; add my personal style and set it for the current buffer
  (c-add-style "PERSONAL" my-c-style t)
  ;; other customizations
  (setq tab-width 4)
  (linum-mode 1)
  )
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

(setq default-buffer-file-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)

(setq default-buffer-file-coding-system 'utf-8-unix)
(setq default-file-name-coding-system 'utf-8-unix)
(setq default-keyboard-coding-system 'utf-8-unix)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
(setq default-sendmail-coding-system 'utf-8-unix)
(setq default-terminal-coding-system 'utf-8-unix)

;;auto-complete
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)

; yasnippet
(add-to-list 'load-path "~/.emacs.d/yasnippet-0.6.1c")
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/yasnippet-0.6.1c/snippets")

;;set tab 4 blank
;;(setq tab-width 4 indent-tabs-mode nil)

;;bind the query-replace
(global-set-key "\C-q" 'query-replace-regexp)

;;cedet
(load-file "~/.emacs.d/cedet-1.1/common/cedet.el")
;;(global-ede-mode 1)                      ; Enable the Project management system
;;(semantic-load-enable-code-helpers)      ; Enable prototype help and smart completion
;;(global-srecode-minor-mode 1)            ; Enable template insertion menu

;;(semantic-load-enable-excessive-code-helpers)

;;(defun my-c-mode-cedet-hook ()
;;  (local-set-key "." 'semantic-complete-self-insert)
;;  (local-set-key ">" 'semantic-complete-self-insert))
;;(add-hook 'c-mode-common-hook 'my-c-mode-cedet-hook)

;;ecb
(add-to-list 'load-path "~/.emacs.d/ecb-2.40")
(require 'ecb)
(require 'ecb-autoloads)

(global-set-key "\C-cm" 'ecb-goto-window-methods)
(global-set-key "\C-ce" 'ecb-goto-window-edit1)

(ecb-layout-define "mylayout" left
  (ecb-set-methods-buffer)
  (select-window (next-window)))

(setq ecb-tree-indent 1)
(setq ecb-windows-width 0.2)
(setq ecb-compile-window-height 10)
(setq ecb-layout-name "mylayout")

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(ecb-options-version "2.40"))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )

;; load dired-x
(add-hook 'dired-load-hook
          (lambda ()
            (load "dired-x")
            ))
(add-hook 'dired-mode-hook
          (lambda ()
            ))

(require 'color-theme)
(color-theme-initialize)
;;(color-theme-calm-forest)
